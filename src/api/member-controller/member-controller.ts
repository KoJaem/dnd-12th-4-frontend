/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * PickiTalki API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from "@tanstack/react-query"
import type { ApiString, RegisterNameParams, TutorialResponse } from ".././model"
import { customInstance } from ".././clientInstance"
import type { ErrorType } from ".././clientInstance"

export const registerName = (params: RegisterNameParams, signal?: AbortSignal) => {
  return customInstance<ApiString>({ url: `/api/members/name`, method: "POST", params, signal })
}

export const getRegisterNameMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerName>>,
    TError,
    { params: RegisterNameParams },
    TContext
  >
}): UseMutationOptions<Awaited<ReturnType<typeof registerName>>, TError, { params: RegisterNameParams }, TContext> => {
  const mutationKey = ["registerName"]
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerName>>, { params: RegisterNameParams }> = (
    props
  ) => {
    const { params } = props ?? {}

    return registerName(params)
  }

  return { mutationFn, ...mutationOptions }
}

export type RegisterNameMutationResult = NonNullable<Awaited<ReturnType<typeof registerName>>>

export type RegisterNameMutationError = ErrorType<unknown>

export const useRegisterName = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerName>>,
    TError,
    { params: RegisterNameParams },
    TContext
  >
}): UseMutationResult<Awaited<ReturnType<typeof registerName>>, TError, { params: RegisterNameParams }, TContext> => {
  const mutationOptions = getRegisterNameMutationOptions(options)

  return useMutation(mutationOptions)
}
export const updateTutorial = () => {
  return customInstance<TutorialResponse>({ url: `/api/members/tutorial/update`, method: "PATCH" })
}

export const getUpdateTutorialMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof updateTutorial>>, TError, void, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof updateTutorial>>, TError, void, TContext> => {
  const mutationKey = ["updateTutorial"]
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTutorial>>, void> = () => {
    return updateTutorial()
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateTutorialMutationResult = NonNullable<Awaited<ReturnType<typeof updateTutorial>>>

export type UpdateTutorialMutationError = ErrorType<unknown>

export const useUpdateTutorial = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof updateTutorial>>, TError, void, TContext>
}): UseMutationResult<Awaited<ReturnType<typeof updateTutorial>>, TError, void, TContext> => {
  const mutationOptions = getUpdateTutorialMutationOptions(options)

  return useMutation(mutationOptions)
}
export const doTutorial = (signal?: AbortSignal) => {
  return customInstance<TutorialResponse>({ url: `/api/members/tutorial`, method: "GET", signal })
}

export const getDoTutorialQueryKey = () => {
  return [`/api/members/tutorial`] as const
}

export const getDoTutorialQueryOptions = <
  TData = Awaited<ReturnType<typeof doTutorial>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof doTutorial>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getDoTutorialQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof doTutorial>>> = ({ signal }) => doTutorial(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof doTutorial>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DoTutorialQueryResult = NonNullable<Awaited<ReturnType<typeof doTutorial>>>
export type DoTutorialQueryError = ErrorType<unknown>

export function useDoTutorial<TData = Awaited<ReturnType<typeof doTutorial>>, TError = ErrorType<unknown>>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof doTutorial>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof doTutorial>>, TError, Awaited<ReturnType<typeof doTutorial>>>,
      "initialData"
    >
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDoTutorial<TData = Awaited<ReturnType<typeof doTutorial>>, TError = ErrorType<unknown>>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof doTutorial>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof doTutorial>>,
        TError,
        Awaited<ReturnType<typeof doTutorial>>
      >,
      "initialData"
    >
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDoTutorial<TData = Awaited<ReturnType<typeof doTutorial>>, TError = ErrorType<unknown>>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof doTutorial>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useDoTutorial<TData = Awaited<ReturnType<typeof doTutorial>>, TError = ErrorType<unknown>>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof doTutorial>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getDoTutorialQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
