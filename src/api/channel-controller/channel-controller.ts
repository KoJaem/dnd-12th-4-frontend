/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * PickiTalki API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from "@tanstack/react-query"
import type {
  ApiChannelJoinResponse,
  ApiChannelMemberResponse,
  ApiChannelSpecificResponse,
  ApiListChannelShowAllResponse,
  ApiMemberCodeNameResponse,
  ChannelCreateRequest,
  ChannelResponse,
  FindChannelByNameParams,
  GetChannelInviteCodeParams,
  InviteCodeDto,
  InviteRequest,
  UpdateMemberCodeNameParams
} from ".././model"
import { customInstance } from ".././clientInstance"
import type { ErrorType, BodyType } from ".././clientInstance"

export const findChannelByName = (params: FindChannelByNameParams, signal?: AbortSignal) => {
  return customInstance<ApiChannelSpecificResponse>({ url: `/api/channels`, method: "GET", params, signal })
}

export const getFindChannelByNameQueryKey = (params: FindChannelByNameParams) => {
  return [`/api/channels`, ...(params ? [params] : [])] as const
}

export const getFindChannelByNameQueryOptions = <
  TData = Awaited<ReturnType<typeof findChannelByName>>,
  TError = ErrorType<unknown>
>(
  params: FindChannelByNameParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelByName>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindChannelByNameQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findChannelByName>>> = ({ signal }) =>
    findChannelByName(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findChannelByName>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindChannelByNameQueryResult = NonNullable<Awaited<ReturnType<typeof findChannelByName>>>
export type FindChannelByNameQueryError = ErrorType<unknown>

export function useFindChannelByName<
  TData = Awaited<ReturnType<typeof findChannelByName>>,
  TError = ErrorType<unknown>
>(
  params: FindChannelByNameParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelByName>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findChannelByName>>,
          TError,
          Awaited<ReturnType<typeof findChannelByName>>
        >,
        "initialData"
      >
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindChannelByName<
  TData = Awaited<ReturnType<typeof findChannelByName>>,
  TError = ErrorType<unknown>
>(
  params: FindChannelByNameParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelByName>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findChannelByName>>,
          TError,
          Awaited<ReturnType<typeof findChannelByName>>
        >,
        "initialData"
      >
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindChannelByName<
  TData = Awaited<ReturnType<typeof findChannelByName>>,
  TError = ErrorType<unknown>
>(
  params: FindChannelByNameParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelByName>>, TError, TData>> }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindChannelByName<
  TData = Awaited<ReturnType<typeof findChannelByName>>,
  TError = ErrorType<unknown>
>(
  params: FindChannelByNameParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelByName>>, TError, TData>> }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindChannelByNameQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const makeChannel = (channelCreateRequest: BodyType<ChannelCreateRequest>, signal?: AbortSignal) => {
  return customInstance<ChannelResponse>({
    url: `/api/channels`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: channelCreateRequest,
    signal
  })
}

export const getMakeChannelMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof makeChannel>>,
    TError,
    { data: BodyType<ChannelCreateRequest> },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof makeChannel>>,
  TError,
  { data: BodyType<ChannelCreateRequest> },
  TContext
> => {
  const mutationKey = ["makeChannel"]
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof makeChannel>>,
    { data: BodyType<ChannelCreateRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return makeChannel(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type MakeChannelMutationResult = NonNullable<Awaited<ReturnType<typeof makeChannel>>>
export type MakeChannelMutationBody = BodyType<ChannelCreateRequest>
export type MakeChannelMutationError = ErrorType<unknown>

export const useMakeChannel = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof makeChannel>>,
    TError,
    { data: BodyType<ChannelCreateRequest> },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof makeChannel>>,
  TError,
  { data: BodyType<ChannelCreateRequest> },
  TContext
> => {
  const mutationOptions = getMakeChannelMutationOptions(options)

  return useMutation(mutationOptions)
}
export const joinMemberToChannel = (inviteRequest: BodyType<InviteRequest>, signal?: AbortSignal) => {
  return customInstance<ApiChannelJoinResponse>({
    url: `/api/channels/join`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: inviteRequest,
    signal
  })
}

export const getJoinMemberToChannelMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof joinMemberToChannel>>,
    TError,
    { data: BodyType<InviteRequest> },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof joinMemberToChannel>>,
  TError,
  { data: BodyType<InviteRequest> },
  TContext
> => {
  const mutationKey = ["joinMemberToChannel"]
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof joinMemberToChannel>>,
    { data: BodyType<InviteRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return joinMemberToChannel(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type JoinMemberToChannelMutationResult = NonNullable<Awaited<ReturnType<typeof joinMemberToChannel>>>
export type JoinMemberToChannelMutationBody = BodyType<InviteRequest>
export type JoinMemberToChannelMutationError = ErrorType<unknown>

export const useJoinMemberToChannel = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof joinMemberToChannel>>,
    TError,
    { data: BodyType<InviteRequest> },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof joinMemberToChannel>>,
  TError,
  { data: BodyType<InviteRequest> },
  TContext
> => {
  const mutationOptions = getJoinMemberToChannelMutationOptions(options)

  return useMutation(mutationOptions)
}
export const updateMemberCodeName = (channelId: string, params: UpdateMemberCodeNameParams) => {
  return customInstance<ApiMemberCodeNameResponse>({
    url: `/api/channels/${channelId}/codeName`,
    method: "PATCH",
    params
  })
}

export const getUpdateMemberCodeNameMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMemberCodeName>>,
    TError,
    { channelId: string; params: UpdateMemberCodeNameParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateMemberCodeName>>,
  TError,
  { channelId: string; params: UpdateMemberCodeNameParams },
  TContext
> => {
  const mutationKey = ["updateMemberCodeName"]
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateMemberCodeName>>,
    { channelId: string; params: UpdateMemberCodeNameParams }
  > = (props) => {
    const { channelId, params } = props ?? {}

    return updateMemberCodeName(channelId, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateMemberCodeNameMutationResult = NonNullable<Awaited<ReturnType<typeof updateMemberCodeName>>>

export type UpdateMemberCodeNameMutationError = ErrorType<unknown>

export const useUpdateMemberCodeName = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMemberCodeName>>,
    TError,
    { channelId: string; params: UpdateMemberCodeNameParams },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof updateMemberCodeName>>,
  TError,
  { channelId: string; params: UpdateMemberCodeNameParams },
  TContext
> => {
  const mutationOptions = getUpdateMemberCodeNameMutationOptions(options)

  return useMutation(mutationOptions)
}
export const findChannelById = (channelId: string, signal?: AbortSignal) => {
  return customInstance<ApiChannelSpecificResponse>({ url: `/api/channels/${channelId}`, method: "GET", signal })
}

export const getFindChannelByIdQueryKey = (channelId: string) => {
  return [`/api/channels/${channelId}`] as const
}

export const getFindChannelByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof findChannelById>>,
  TError = ErrorType<unknown>
>(
  channelId: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelById>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindChannelByIdQueryKey(channelId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findChannelById>>> = ({ signal }) =>
    findChannelById(channelId, signal)

  return { queryKey, queryFn, enabled: !!channelId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findChannelById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindChannelByIdQueryResult = NonNullable<Awaited<ReturnType<typeof findChannelById>>>
export type FindChannelByIdQueryError = ErrorType<unknown>

export function useFindChannelById<TData = Awaited<ReturnType<typeof findChannelById>>, TError = ErrorType<unknown>>(
  channelId: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findChannelById>>,
          TError,
          Awaited<ReturnType<typeof findChannelById>>
        >,
        "initialData"
      >
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindChannelById<TData = Awaited<ReturnType<typeof findChannelById>>, TError = ErrorType<unknown>>(
  channelId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findChannelById>>,
          TError,
          Awaited<ReturnType<typeof findChannelById>>
        >,
        "initialData"
      >
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindChannelById<TData = Awaited<ReturnType<typeof findChannelById>>, TError = ErrorType<unknown>>(
  channelId: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelById>>, TError, TData>> }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindChannelById<TData = Awaited<ReturnType<typeof findChannelById>>, TError = ErrorType<unknown>>(
  channelId: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelById>>, TError, TData>> }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindChannelByIdQueryOptions(channelId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const findChannelMembers = (channelId: string, signal?: AbortSignal) => {
  return customInstance<ApiChannelMemberResponse>({ url: `/api/channels/${channelId}/members`, method: "GET", signal })
}

export const getFindChannelMembersQueryKey = (channelId: string) => {
  return [`/api/channels/${channelId}/members`] as const
}

export const getFindChannelMembersQueryOptions = <
  TData = Awaited<ReturnType<typeof findChannelMembers>>,
  TError = ErrorType<unknown>
>(
  channelId: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelMembers>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindChannelMembersQueryKey(channelId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findChannelMembers>>> = ({ signal }) =>
    findChannelMembers(channelId, signal)

  return { queryKey, queryFn, enabled: !!channelId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findChannelMembers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindChannelMembersQueryResult = NonNullable<Awaited<ReturnType<typeof findChannelMembers>>>
export type FindChannelMembersQueryError = ErrorType<unknown>

export function useFindChannelMembers<
  TData = Awaited<ReturnType<typeof findChannelMembers>>,
  TError = ErrorType<unknown>
>(
  channelId: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelMembers>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findChannelMembers>>,
          TError,
          Awaited<ReturnType<typeof findChannelMembers>>
        >,
        "initialData"
      >
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindChannelMembers<
  TData = Awaited<ReturnType<typeof findChannelMembers>>,
  TError = ErrorType<unknown>
>(
  channelId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelMembers>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findChannelMembers>>,
          TError,
          Awaited<ReturnType<typeof findChannelMembers>>
        >,
        "initialData"
      >
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindChannelMembers<
  TData = Awaited<ReturnType<typeof findChannelMembers>>,
  TError = ErrorType<unknown>
>(
  channelId: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelMembers>>, TError, TData>> }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindChannelMembers<
  TData = Awaited<ReturnType<typeof findChannelMembers>>,
  TError = ErrorType<unknown>
>(
  channelId: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findChannelMembers>>, TError, TData>> }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindChannelMembersQueryOptions(channelId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const findAllOwnChannels = (signal?: AbortSignal) => {
  return customInstance<ApiListChannelShowAllResponse>({ url: `/api/channels/own`, method: "GET", signal })
}

export const getFindAllOwnChannelsQueryKey = () => {
  return [`/api/channels/own`] as const
}

export const getFindAllOwnChannelsQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllOwnChannels>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllOwnChannels>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllOwnChannelsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllOwnChannels>>> = ({ signal }) =>
    findAllOwnChannels(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllOwnChannels>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllOwnChannelsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllOwnChannels>>>
export type FindAllOwnChannelsQueryError = ErrorType<unknown>

export function useFindAllOwnChannels<
  TData = Awaited<ReturnType<typeof findAllOwnChannels>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllOwnChannels>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof findAllOwnChannels>>,
        TError,
        Awaited<ReturnType<typeof findAllOwnChannels>>
      >,
      "initialData"
    >
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllOwnChannels<
  TData = Awaited<ReturnType<typeof findAllOwnChannels>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllOwnChannels>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof findAllOwnChannels>>,
        TError,
        Awaited<ReturnType<typeof findAllOwnChannels>>
      >,
      "initialData"
    >
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllOwnChannels<
  TData = Awaited<ReturnType<typeof findAllOwnChannels>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllOwnChannels>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllOwnChannels<
  TData = Awaited<ReturnType<typeof findAllOwnChannels>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllOwnChannels>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllOwnChannelsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const findAllInvitedChannels = (signal?: AbortSignal) => {
  return customInstance<ApiListChannelShowAllResponse>({ url: `/api/channels/invited`, method: "GET", signal })
}

export const getFindAllInvitedChannelsQueryKey = () => {
  return [`/api/channels/invited`] as const
}

export const getFindAllInvitedChannelsQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllInvitedChannels>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllInvitedChannels>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllInvitedChannelsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllInvitedChannels>>> = ({ signal }) =>
    findAllInvitedChannels(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllInvitedChannels>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllInvitedChannelsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllInvitedChannels>>>
export type FindAllInvitedChannelsQueryError = ErrorType<unknown>

export function useFindAllInvitedChannels<
  TData = Awaited<ReturnType<typeof findAllInvitedChannels>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllInvitedChannels>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof findAllInvitedChannels>>,
        TError,
        Awaited<ReturnType<typeof findAllInvitedChannels>>
      >,
      "initialData"
    >
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllInvitedChannels<
  TData = Awaited<ReturnType<typeof findAllInvitedChannels>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllInvitedChannels>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof findAllInvitedChannels>>,
        TError,
        Awaited<ReturnType<typeof findAllInvitedChannels>>
      >,
      "initialData"
    >
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllInvitedChannels<
  TData = Awaited<ReturnType<typeof findAllInvitedChannels>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllInvitedChannels>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllInvitedChannels<
  TData = Awaited<ReturnType<typeof findAllInvitedChannels>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllInvitedChannels>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllInvitedChannelsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getChannelInviteCode = (params: GetChannelInviteCodeParams, signal?: AbortSignal) => {
  return customInstance<InviteCodeDto>({ url: `/api/channels/inviteCode`, method: "GET", params, signal })
}

export const getGetChannelInviteCodeQueryKey = (params: GetChannelInviteCodeParams) => {
  return [`/api/channels/inviteCode`, ...(params ? [params] : [])] as const
}

export const getGetChannelInviteCodeQueryOptions = <
  TData = Awaited<ReturnType<typeof getChannelInviteCode>>,
  TError = ErrorType<unknown>
>(
  params: GetChannelInviteCodeParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelInviteCode>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetChannelInviteCodeQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getChannelInviteCode>>> = ({ signal }) =>
    getChannelInviteCode(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getChannelInviteCode>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetChannelInviteCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getChannelInviteCode>>>
export type GetChannelInviteCodeQueryError = ErrorType<unknown>

export function useGetChannelInviteCode<
  TData = Awaited<ReturnType<typeof getChannelInviteCode>>,
  TError = ErrorType<unknown>
>(
  params: GetChannelInviteCodeParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelInviteCode>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChannelInviteCode>>,
          TError,
          Awaited<ReturnType<typeof getChannelInviteCode>>
        >,
        "initialData"
      >
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetChannelInviteCode<
  TData = Awaited<ReturnType<typeof getChannelInviteCode>>,
  TError = ErrorType<unknown>
>(
  params: GetChannelInviteCodeParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelInviteCode>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChannelInviteCode>>,
          TError,
          Awaited<ReturnType<typeof getChannelInviteCode>>
        >,
        "initialData"
      >
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetChannelInviteCode<
  TData = Awaited<ReturnType<typeof getChannelInviteCode>>,
  TError = ErrorType<unknown>
>(
  params: GetChannelInviteCodeParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelInviteCode>>, TError, TData>> }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetChannelInviteCode<
  TData = Awaited<ReturnType<typeof getChannelInviteCode>>,
  TError = ErrorType<unknown>
>(
  params: GetChannelInviteCodeParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelInviteCode>>, TError, TData>> }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetChannelInviteCodeQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const findAllChannels = (signal?: AbortSignal) => {
  return customInstance<ApiListChannelShowAllResponse>({ url: `/api/channels/all`, method: "GET", signal })
}

export const getFindAllChannelsQueryKey = () => {
  return [`/api/channels/all`] as const
}

export const getFindAllChannelsQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllChannels>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllChannels>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllChannelsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllChannels>>> = ({ signal }) => findAllChannels(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllChannels>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllChannelsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllChannels>>>
export type FindAllChannelsQueryError = ErrorType<unknown>

export function useFindAllChannels<
  TData = Awaited<ReturnType<typeof findAllChannels>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllChannels>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof findAllChannels>>,
        TError,
        Awaited<ReturnType<typeof findAllChannels>>
      >,
      "initialData"
    >
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllChannels<
  TData = Awaited<ReturnType<typeof findAllChannels>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllChannels>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof findAllChannels>>,
        TError,
        Awaited<ReturnType<typeof findAllChannels>>
      >,
      "initialData"
    >
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllChannels<
  TData = Awaited<ReturnType<typeof findAllChannels>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllChannels>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllChannels<
  TData = Awaited<ReturnType<typeof findAllChannels>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllChannels>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllChannelsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
