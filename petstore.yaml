openapi: 3.0.1
info:
  title: PickiTalki API
  version: "1.0"
servers:
  - url: http://ec2-52-79-242-171.ap-northeast-2.compute.amazonaws.com:8080
    description: Generated server url
security:
  - Bearer Authentication: []
    CookieAuth: []
paths:
  "/auth/refresh":
    post:
      tags:
        - token-auth-controller
      operationId: refreshAccessToken
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object
                additionalProperties:
                  type: string
  "/api/members/name":
    post:
      tags:
        - member-controller
      operationId: registerName
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiString"
  "/api/channels":
    get:
      tags:
        - channel-controller
      operationId: findChannel
      parameters:
        - name: channelName
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiChannelSpecificResponse"
    post:
      tags:
        - channel-controller
      operationId: makeChannel
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ChannelCreateRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ChannelResponse"
  "/api/channels/{channelId}/questions":
    post:
      tags:
        - question-controller
      operationId: createQuestion
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/QuestionCreateRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/QuestionCreateResponse"
  "/api/channels/join":
    post:
      tags:
        - channel-controller
      operationId: joinMemberToChannel
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/InviteRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiChannelJoinResponse"
  "/api/members/tutorial/update":
    patch:
      tags:
        - member-controller
      operationId: updateTutorial
      parameters: []
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TutorialResponse"
  "/api/channels/{channelId}/codeName":
    patch:
      tags:
        - channel-controller
      operationId: updateMemberCodeName
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
        - name: codeName
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiMemberCodeNameResponse"
  "/auth/kakao/exchange":
    get:
      tags:
        - kakao-auth-exchange-controller
      operationId: kakaoCallback
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiUserResponse"
  "/api/members/tutorial":
    get:
      tags:
        - member-controller
      operationId: doTutorial
      parameters: []
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TutorialResponse"
  "/api/channels/{channelId}/questions/today":
    get:
      tags:
        - question-controller
      operationId: findTodayQuestionByChannel
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TodayQuestionResponse"
  "/api/channels/{channelId}/questions/all":
    get:
      tags:
        - question-controller
      operationId: findQuestionsByChannel
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/QuestionResponse"
  "/api/channels/{channelId}/members":
    get:
      tags:
        - channel-controller
      operationId: findChannelMembers
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiChannelMemberResponse"
  "/api/channels/own":
    get:
      tags:
        - channel-controller
      operationId: findAllOwnChannels
      parameters: []
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiListChannelShowAllResponse"
  "/api/channels/invited":
    get:
      tags:
        - channel-controller
      operationId: findAllInvitedChannels
      parameters: []
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiListChannelShowAllResponse"
  "/api/channels/inviteCode":
    get:
      tags:
        - channel-controller
      operationId: getChannelInviteCode
      parameters:
        - name: channelName
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/InviteCodeDto"
  "/api/channels/all":
    get:
      tags:
        - channel-controller
      operationId: findAllChannels
      parameters: []
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiListChannelShowAllResponse"
components:
  schemas:
    ApiString:
      type: object
      properties:
        result:
          "$ref": "#/components/schemas/Result"
        body:
          type: string
    Result:
      type: object
      properties:
        resultCode:
          type: integer
          format: int32
        resultMessage:
          type: string
        resultDescription:
          type: string
    ChannelCreateRequest:
      type: object
      properties:
        channelName:
          type: string
        codeName:
          type: string
    ChannelResponse:
      required:
        - channelId
      type: object
      properties:
        channelId:
          type: string
        channelName:
          type: string
        inviteCode:
          type: string
    QuestionCreateRequest:
      type: object
      properties:
        content:
          type: string
        isAnonymous:
          type: boolean
        anonymousName:
          type: string
    QuestionCreateResponse:
      type: object
      properties:
        questionId:
          type: integer
          format: int64
    InviteRequest:
      type: object
      properties:
        inviteCode:
          type: string
        codeName:
          type: string
    ApiChannelJoinResponse:
      type: object
      properties:
        result:
          "$ref": "#/components/schemas/Result"
        body:
          "$ref": "#/components/schemas/ChannelJoinResponse"
    ChannelJoinResponse:
      type: object
      properties:
        channelId:
          type: string
        channelName:
          type: string
        codeName:
          type: string
    TutorialResponse:
      type: object
      properties:
        tutorialStatus:
          type: string
          enum:
            - PASS
            - NON_PASS
    ApiMemberCodeNameResponse:
      type: object
      properties:
        result:
          "$ref": "#/components/schemas/Result"
        body:
          "$ref": "#/components/schemas/MemberCodeNameResponse"
    MemberCodeNameResponse:
      required:
        - codeName
      type: object
      properties:
        codeName:
          type: string
    ApiUserResponse:
      type: object
      properties:
        result:
          "$ref": "#/components/schemas/Result"
        body:
          "$ref": "#/components/schemas/UserResponse"
    UserResponse:
      type: object
      properties:
        token:
          type: string
        newMember:
          type: boolean
    ApiChannelSpecificResponse:
      type: object
      properties:
        result:
          "$ref": "#/components/schemas/Result"
        body:
          "$ref": "#/components/schemas/ChannelSpecificResponse"
    ChannelSpecificResponse:
      type: object
      properties:
        channelRoomName:
          type: string
        channelOwnerName:
          type: string
        countPerson:
          type: integer
          format: int64
        signalCount:
          type: integer
          format: int64
    TodayQuestionResponse:
      type: object
      properties:
        signalCount:
          type: integer
          format: int64
        isExist:
          type: boolean
        content:
          type: string
        writer:
          type: string
        time:
          type: string
    QuestionResponse:
      type: object
      properties:
        writerName:
          type: string
        signalNumber:
          type: integer
          format: int64
        content:
          type: string
        createdAt:
          type: string
    ApiChannelMemberResponse:
      type: object
      properties:
        result:
          "$ref": "#/components/schemas/Result"
        body:
          "$ref": "#/components/schemas/ChannelMemberResponse"
    ChannelMemberDto:
      type: object
      properties:
        channelMemberId:
          type: integer
          format: int64
        nickName:
          type: string
        profileImageUrl:
          type: string
    ChannelMemberResponse:
      type: object
      properties:
        memberCount:
          type: integer
          format: int64
        channelMembers:
          type: array
          items:
            "$ref": "#/components/schemas/ChannelMemberDto"
    ApiListChannelShowAllResponse:
      type: object
      properties:
        result:
          "$ref": "#/components/schemas/Result"
        body:
          type: array
          items:
            "$ref": "#/components/schemas/ChannelShowAllResponse"
    ChannelShowAllResponse:
      type: object
      properties:
        channelRoomName:
          type: string
        channelOwnerName:
          type: string
        countPerson:
          type: integer
          format: int64
        signalCount:
          type: integer
          format: int64
    InviteCodeDto:
      required:
        - inviteCode
      type: object
      properties:
        inviteCode:
          type: string
  securitySchemes:
    Bearer Authentication:
      type: http
      scheme: bearer
      bearerFormat: JWT
